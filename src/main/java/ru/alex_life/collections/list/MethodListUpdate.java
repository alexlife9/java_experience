package ru.alex_life.collections.list;

import java.util.ArrayList;
import java.util.List;

/**
 * Теория. Интерфейс List
 * В этом уроке мы познакомимся со структурой данных – список, который описывается интерфейсом List.
 * В такой структуре в определенной последовательности хранятся элементы одного типа.
 * Очень важная особенность данной структуры – мы всегда можем пронумеровать элементы списка,
 * т.е. проводя аналогию с массивом – у каждого элемента есть свой индекс.
 * Если проводить параллель из жизни – у нас есть, к примеру, склад строительных материалов,
 * на котором пронумерованы стеллажи, и чтобы не бегать по всему складу сотрудники необходимое могут найти по номеру.
 * При этом у нас может быть один и тот же материал, но разного производителя, т.е. одинаковые элементы.
 *
 * Самым важным для работы с коллекциями является набор CRUD – операций которые мы можем с ними сделать
 * (CRUD – сокращение от слов create, read, update and delete).
 * Т.е. нас в первую очередь интересует набор методов, которые объявлены в интерфейсе List<E> и как они работают.
 * Для рассмотрения будем использовать средства обобщенного программирования, т.е. везде используем generics,
 * вместо E в объявлении интерфейса может быть определен любой тип ссылочных данных.
 *
 * @author Alex_life
 * @version 1.0
 * @since 01.11.2021
 */
public class MethodListUpdate {
    public static void main(String[] args) {
        //UPDATE - Изменение элементов в списке
        //1. E set(int index, E element) – заменяет элемент позиция которого равна index на элемент
        //который мы передаем в метод (element). При этом метод возвращает старое значение элемента с индексом index.
        List<String> rsl1 = new ArrayList<>();
        rsl1.add("one");
        rsl1.add("two");
        rsl1.add("three");
        rsl1.set(1, "two and second");
        for (String s : rsl1) {
            System.out.println("Меняем добавленный элемент: " + s);
        }
        System.out.println();

        //2. default void replaceAll(UnaryOperator<E> operator) – заменяет каждый элемент в списке
        // результатом применения оператора (operator) к каждому элементу.
        List<String> rsl2 = new ArrayList<>();
        rsl2.add("one");
        rsl2.add("two");
        rsl2.add("three");
        rsl2.replaceAll(String::toUpperCase);
        for (String s : rsl2) {
            System.out.println("Меняем каждый добавленный элемент: " + s);
        }
        System.out.println();
    }
}
