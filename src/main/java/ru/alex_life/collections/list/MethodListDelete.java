package ru.alex_life.collections.list;

import java.util.ArrayList;
import java.util.List;

/**
 * Теория. Интерфейс List
 * В этом уроке мы познакомимся со структурой данных – список, который описывается интерфейсом List.
 * В такой структуре в определенной последовательности хранятся элементы одного типа.
 * Очень важная особенность данной структуры – мы всегда можем пронумеровать элементы списка,
 * т.е. проводя аналогию с массивом – у каждого элемента есть свой индекс.
 * Если проводить параллель из жизни – у нас есть, к примеру, склад строительных материалов,
 * на котором пронумерованы стеллажи, и чтобы не бегать по всему складу сотрудники необходимое могут найти по номеру.
 * При этом у нас может быть один и тот же материал, но разного производителя, т.е. одинаковые элементы.
 *
 * Самым важным для работы с коллекциями является набор CRUD – операций которые мы можем с ними сделать
 * (CRUD – сокращение от слов create, read, update and delete).
 * Т.е. нас в первую очередь интересует набор методов, которые объявлены в интерфейсе List<E> и как они работают.
 * Для рассмотрения будем использовать средства обобщенного программирования, т.е. везде используем generics,
 * вместо E в объявлении интерфейса может быть определен любой тип ссылочных данных.
 *
 * @author Alex_life
 * @version 1.0
 * @since 01.11.2021
 */
public class MethodListDelete {
    public static void main(String[] args) {
        //DELETE - Удаление элементов из списка
        //Для выполнения данной операции в интерфейсе List<E> определены 5 методов:
        //1. E remove(int index) – удаляет элемент из списка по индексу index, при этом метод возвращает удаленный элемент.
        List<String> rsl1 = new ArrayList<>();
        rsl1.add("one");
        rsl1.add("two");
        rsl1.add("three");
        rsl1.remove(1); // удаляем "two"
        for (String s : rsl1) {
            System.out.println("Удаляем элемент по индексу из списка: " + s);
        }
        System.out.println();

        //2. boolean remove(E e) – удаляет элемент е типа E из коллекции при его ПЕРВОМ вхождении в список, если он есть в коллекции.
        List<String> rsl2 = new ArrayList<>();
        rsl2.add("one");
        rsl2.add("two");
        rsl2.add("three");
        rsl2.remove("three"); // удаляем "three"
        for (String s : rsl2) {
            System.out.println("Удаляем элемент по значению из списка: " + s);
        }
        //Метод remove(E e) реализован с помощью цикла for(), подразумевает под собой первоначальный поиск удаляемого элемента
        // и только потом он удаляется. Соответственно, использование этого метода внутри цикла,
        // который перебирает список, не рекомендуется, поскольку мы будем проходить по списку дважды.
        System.out.println();

        //3. boolean removeAll(Collection<?> col) – метод удаляет из списка все элементы, которые содержатся в коллекции col,
        // если в результате работы метода исходный список изменился - метод возвращает true.
        List<String> rsl3 = new ArrayList<>();
        rsl3.add("one");
        rsl3.add("two");
        rsl3.add("three");
        List<String> list = new ArrayList<>();
        list.add("one");
        list.add("three");
        rsl3.removeAll(list); //удаляем все совпадения с первой коллекцией
        for (String s : rsl3) {
            System.out.println("Удаляем все совпадения с первой коллекцией: " + s);
        }
        System.out.println();

        //4. boolean retainAll(Collection<?> col) – метод также удаляет элементы из списка, за исключением тех,
        // которые находятся в коллекции col, если в результате работы метода исходный список изменился - метод возвращает true.
        List<String> rsl4 = new ArrayList<>();
        rsl4.add("one");
        rsl4.add("two");
        rsl4.add("three");
        List<String> list2 = new ArrayList<>();
        list2.add("one");
        list2.add("three");
        rsl4.retainAll(list2); //оставляем только все совпадения с первой коллекцией
        for (String s : rsl4) {
            System.out.println("Удаляем все НЕсовпадения с первой коллекцией: " + s);
        }
        System.out.println();

        //5. default boolean removeIf(Predicate<? super E> filter) – метод удаляет все элементы из коллекции,
        // которые удовлетворяют условию определенному в предикате filter(передается в виде лямбда выражения).
        // Если в результате работы метода список изменился - метод возвращает true.
        List<String> rsl5 = new ArrayList<>();
        rsl5.add("one");
        rsl5.add("twoooo");
        rsl5.add("three");
        rsl5.removeIf(s -> s.length() <= 3); //удаляем элементы, длина слов которых меньше или равна 3 символам
        for (String s : rsl5) {
            System.out.println("Удаляем элементы по условию предиката: " + s);
        }
        System.out.println();
    }
}
